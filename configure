#!/bin/bash

set -eo pipefail

dots=$(pwd)/dots

#=== FUNCTION =================================================================
#        NAME: backup
# DESCRIPTION: backup a file ($1 => $1.bak) if it exists
# PARAMETER 1: the file you want to backup
#==============================================================================
backup() {
    local fname=$1
    if [ -e "$fname" ]; then
        mv "$fname" "$fname.bak"
    fi
}

#=== FUNCTION =================================================================
#        NAME: link
# DESCRIPTION: create a symbolic link
# PARAMETER 1: the file you want to end up pointing to
# PARAMETER 2: the configuration file from this repo
#==============================================================================
link() {
    local dest=$1
    local src=$2

    backup "$dest"
    if [ -h "$dest" ]; then
        rm "$dest"
    fi

    echo "linking $src with $dest"
    ln -s "$src" "$dest"
}

#=== FUNCTION =================================================================
#        NAME: usage
# DESCRIPTION: prints help output
#==============================================================================
usage() {
    echo "Usage: ./configuration <flag|command|tool>"
    echo
    echo "  Flags:"
    echo "  --help, -h                    # View this help text"
    echo "  --update, -u                  # Update dependencies (like Vim plugins)"
    echo
    echo "  Commands:"
    echo "  install, i <repo> [path]      # Install a git submodule as a Pathogen plugin"
    echo
    echo -n "  Tools:                        # "

    local i=0
    for option in git vim ctags tmux screen bash
    do
        i=$((i+1))

        if [[ "$i" != "1" ]]; then
          echo -n ", "
        fi

        echo -n "$option"
    done

    echo
}

#=== MAIN =====================================================================
if [ -z "$1" ]; then
  usage
  exit 1
fi

for arg in "$@"
do
    case $arg in
        git)
            link ~/.gitconfig "$dots/gitconfig"
            link ~/.gitignore "$dots/gitignore"
            ;;

        vim)
            git submodule update --init
            link ~/.gvimrc "$dots/gvimrc"
            link ~/.vimrc "$dots/vimrc"
            link ~/.vim "$dots/vim"
            ;;

        ctags)
            link ~/.ctags "$dots/ctags"
            ;;

        tmux)
            link ~/.tmux.conf "$dots/tmux.conf"
            ;;

        screen)
            link ~/.screenrc "$dots/screenrc"
            ;;

        bash)
            link ~/.bashrc "$dots/bashrc"
            ;;

        i|install)
            url="$2"
            dir="$3"

            if [ -z "$dir" ]; then
                dir=$(echo $2 | iconv -t ascii//TRANSLIT | sed -E s/[^a-zA-Z0-9]+/-/g | sed -E s/^-+\|-+$//g | tr A-Z a-z)
            fi

            if [[ "$dir" != dots* ]]; then
                dir="dots/vim/bundle/$dir"
            fi

            echo -n "I'm going to install $url at $dir, is this ok? [y/n] "
            read ans

            if [ "$ans" == "y" ]; then
                git submodule add "$url" "$dir"
            else
                echo "Bailing out"
            fi

            exit 0
            ;;

        -u|--update)
            for p in dots/vim/bundle/*;
            do
                pushd "$p" &> /dev/null
                echo "updating $p..."
                git pull --rebase origin master &> /dev/null &
                popd &> /dev/null
            done

            wait
            echo "done updating $(echo $(wc -w <<< "$(ls ./dots/vim/bundle/)")) packages"
            exit 0

            ;;

        -h|--help)
            usage
            exit 0
            ;;

        *)
            echo "Invalid argument $arg"
            echo
            usage
            exit 1
            ;;
    esac
done
