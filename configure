#!/bin/bash

set -eo pipefail

dots=$(pwd)/dots

#=== FUNCTION =================================================================
#        NAME: warn
# DESCRIPTION: show a warning message
# PARAMETER 1: message
#==============================================================================
warn() {
  local msg=$1
  echo "warn: $msg"
}

#=== FUNCTION =================================================================
#        NAME: info
# DESCRIPTION: show an info message
# PARAMETER 1: message
#==============================================================================
info() {
  local msg=$1
  echo "info: $msg"
}

#=== FUNCTION =================================================================
#        NAME: confirm
# DESCRIPTION: waits for user input
#==============================================================================
confirm() {
  echo -n "ok? "
  read
}

#=== FUNCTION =================================================================
#        NAME: backup
# DESCRIPTION: backup a file ($1 => $1.bak) if it exists
# PARAMETER 1: the file you want to backup
#==============================================================================
backup() {
  local fname=$1
  if [ -e "$fname" ]; then
    mv "$fname" "$fname.bak"
  fi
}

#=== FUNCTION =================================================================
#        NAME: link
# DESCRIPTION: create a symbolic link
# PARAMETER 1: the file you want to end up pointing to
# PARAMETER 2: the configuration file from this repo
#==============================================================================
link() {
  local dest=$1
  local src=$2

  backup "$dest"
  if [ -h "$dest" ]; then
    rm "$dest"
  fi

  info "linking $src with $dest"
  ln -s "$src" "$dest"
}

#=== FUNCTION =================================================================
#        NAME: install_it
# DESCRIPTION: install a vim plugin
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
install_it() {
  local url="$1"
  local dir=$(vim_plugin_dir_path "$1" "$2")

  info "repository url is $url"
  info "install directory will be $dir"
  echo -n "confirm: ok? [y/N] "
  read ans

  if [ "$ans" == "y" ]; then
    info "saving git submodule"
    git submodule add "$url" "$dir"
    info "saved git submodule"
  else
    info "not installing plugin"
  fi
}

#=== FUNCTION =================================================================
#        NAME: soft_install_it
# DESCRIPTION: try out a vim plugin
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
soft_install_it() {
  local url="$1"
  local dir=$(vim_plugin_dir_path "$1" "$2")

  info "repository url is $url"
  info "install directory will be $dir"
  echo -n "confirm: ok? [y/N] "
  read ans

  if [ "$ans" == "y" ]; then
    info "cloning git repo"
    git clone "$url" "$dir"
    info "done"
  else
    info "not installing plugin"
  fi
}

#=== FUNCTION =================================================================
#        NAME: unsoft_install_it
# DESCRIPTION: stop trying that plugin out
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
unsoft_install_it() {
  local dir=$(vim_plugin_dir_path "$1" "$2")

  if [ -d "$dir" ]; then
    echo "deleting $dir"
    rm -rf "$dir"
    echo "done"
  else
    echo "looking in $dir but did not find the plugin"
  fi
}

#=== FUNCTION =================================================================
#        NAME: vim_plugin_dir_path
# DESCRIPTION: print out the path to where a given vim plugin should be
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
vim_plugin_dir_path() {
  local url="$1"
  local dir="$2"

  if [ -z "$dir" ]; then
    dir=$(echo $url | awk -F'/' '{ print $5 }' | sed -e 's/.git$//')
  fi

  if [[ "$dir" != dots* ]]; then
    dir="dots/vim/pack/eges/start/$dir"
  fi

  echo "$dir"
}

#=== FUNCTION =================================================================
#        NAME: usage
# DESCRIPTION: prints help output
#==============================================================================
usage() {
  echo "Usage: ./configuration <flag|command|tool>"
  echo
  echo "  Flags:"
  echo "  --help, -h                    # View this help text"
  echo
  echo "  Commands:"
  echo "  install, i <repo> [path]      # Install a git submodule as a vim plugin"
  echo "  try <repo> [path]             # Temporarily try out a vim plugin"
  echo "  untry <repo> [path]           # Remove a temporary vim plugin"
  echo "  update, u                     # Update dependencies (like Vim plugins)"
  echo
  echo -n "  Tools:                        # "

  local i=0
  for option in ack git emacs vim ctags tmux screen bash scala chunkwm kitty irb
  do
    i=$((i+1))

    if [[ "$i" != "1" ]]; then
      echo -n ", "
    fi

    echo -n "$option"
  done

  echo
}

#=== MAIN =====================================================================
if [ -z "$1" ]; then
  usage
  exit 1
fi

for arg in "$@"
do
  case $arg in
    ack)
      link ~/.ackrc "$dots/ackrc"
      ;;

    git)
      link ~/.gitconfig "$dots/gitconfig"
      link ~/.gitignore "$dots/gitignore"
      ;;

    irb)
      link ~/.irbrc "$dots/irbrc"
      ;;

    emacs)
      link ~/.emacs "$dots/emacs"
      ;;

    nvim|neovim)
      link ~/.config/nvim "$dots/nvim"
      ;;

    vim)
      git submodule update --init
      link ~/.vimrc "$dots/vimrc"
      link ~/.vim "$dots/vim"
      ;;

    kitty)
      link ~/.config/kitty/kitty.conf "$dots/kitty.conf"
      ;;

    chunkwm)
      link ~/.chunkwmrc "$dots/chunkwmrc"
      link ~/.skhdrc "$dots/skhdrc"
      ;;

    ctags)
      link ~/.ctags "$dots/ctags"
      ;;

    tmux)
      link ~/.tmux.conf "$dots/tmux.conf"
      ;;

    screen)
      link ~/.screenrc "$dots/screenrc"
      ;;

    bash)
      link ~/.bashrc "$dots/bashrc"
      link ~/.bash_aliases "$dots/bash_aliases"
      ;;

    scala)
      link ~/.scalafmt.conf "$dots/scalafmt.conf"
      link ~/.scalastyle.xml "$dots/scalastyle.xml"
      ;;

    i|install)
      install_it "$2" "$3"
      exit 0
      ;;

    try)
      soft_install_it "$2" "$3"
      exit 0
      ;;

    untry)
      unsoft_install_it "$2" "$3"
      exit 0
      ;;

    u|update)
      for p in dots/vim/pack/eges/start/* module/*;
      do
        if [ ! -d "$p" ]; then
          continue
        fi
        info "updating $p..."
        pushd "$p" &> /dev/null
        git pull --rebase origin $(git branch --show-current) &> /dev/null &
        popd &> /dev/null
      done

      wait
      info "done updating $(echo $(wc -w <<< "$(ls ./dots/vim/pack/eges/start/)")) packages"
      exit 0

      ;;

    -h|--help)
      usage
      exit 0
      ;;

    *)
      echo "Invalid argument $arg"
      echo
      usage
      exit 1
      ;;
  esac
done
