#!/bin/bash

set -eo pipefail

dots=$(pwd)/dots

#=== FUNCTION =================================================================
#        NAME: warn
# DESCRIPTION: show a warning message
# PARAMETER 1: message
#==============================================================================
warn() {
  local msg=$1
  echo "warn: $msg"
}

#=== FUNCTION =================================================================
#        NAME: info
# DESCRIPTION: show an info message
# PARAMETER 1: message
#==============================================================================
info() {
  local msg=$1
  echo "info: $msg"
}

#=== FUNCTION =================================================================
#        NAME: confirm
# DESCRIPTION: waits for user input
#==============================================================================
confirm() {
  echo -n "ok? "
  read
}

#=== FUNCTION =================================================================
#        NAME: software
# DESCRIPTION: display common programs
#
#
# chunkwm and co. may need the following:
#
#     brew tap crisidev/homebrew-chunkwm
#     brew install --HEAD --with-tmp-logging chunkwm
#     brew install --HEAD --with-logging  koekeishiya/formulae/skhd
#
#==============================================================================
software() {
  set +eo pipefail

  installed macapp Simplenote https://simplenote.com
  installed macapp Todoist https://en.todoist.com/downloads
  installed macapp 1Password\ 7 https://1password.com/downloads
  installed macapp Dropbox https://www.dropbox.com/install
  installed macapp Spotify https://www.spotify.com/us/download

  installed cmd tmux
  installed cmd brew "https://brew.sh"
  installed cmd protoc "https://github.com/protocolbuffers/protobuf/releases"
  installed cmd fff "https://github.com/dylanaraps/fff#manual"

  installed brew ack
  installed brew chunkwm
  installed brew coreutils
  installed brew ctags
  installed brew findutils
  installed brew gawk
  installed brew gnu-getopt
  installed brew gnu-indent
  installed brew gnu-sed
  installed brew gnu-tar
  installed brew gnutls
  installed brew koekeishiya/formulae/skhd
  installed brew reattach-to-user-namespace
  installed brew rlwrap
  installed brew z

  info done

  set -eo pipefail
}

#=== FUNCTION =================================================================
#        NAME: installed
# DESCRIPTION: check if something is installed
# PARAMETER 1: label used to figure out how to find the app
# PARAMETER 2: name of the program
# PARAMETER 3: suggestion to show when not found
#==============================================================================
installed() {
  local type=$1
  local name=$2
  local suggestion=$3

  local warning=""
  local found=1

  case "$type" in
    cmd)
      which "$name" &> /dev/null
      found=$?
      ;;

    brew)
      suggestion="'brew install $name'"
      which brew &> /dev/null
      if [ $? -ne 0 ]; then
        warning="brew is required to check for this program."
      else
        brew list "$name" &> /dev/null
        found=$?
      fi
      ;;

    macapp)
      test -d "/Applications/$name.app"
      found=$?
      ;;

    *)
      warning="Invalid program type: $type"
      ;;
  esac

  if [ "$warning" != "" ]; then
    warn "$name $warning"
    return
  fi

  echo -n "info: $name "
  printf '%*.*s' 0 $((40 - ${#name})) \
    "........................................."

  if [ $found -eq 0 ]; then
    echo " ok"
  else
    echo " missing $suggestion"
  fi

  return $found
}

#=== FUNCTION =================================================================
#        NAME: backup
# DESCRIPTION: backup a file ($1 => $1.bak) if it exists
# PARAMETER 1: the file you want to backup
#==============================================================================
backup() {
  local fname=$1
  if [ -e "$fname" ]; then
    mv "$fname" "$fname.bak"
  fi
}

#=== FUNCTION =================================================================
#        NAME: link
# DESCRIPTION: create a symbolic link
# PARAMETER 1: the file you want to end up pointing to
# PARAMETER 2: the configuration file from this repo
#==============================================================================
link() {
  local dest=$1
  local src=$2

  backup "$dest"
  if [ -h "$dest" ]; then
    rm "$dest"
  fi

  info "linking $src with $dest"
  ln -s "$src" "$dest"
}

#=== FUNCTION =================================================================
#        NAME: try_it
# DESCRIPTION: clone a vim plugin or delete it if it already exists
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
try_it() {
  local url="$1"
  local dir="$2"

  if [ -z "$dir" ]; then
    dir=$(echo $url | awk -F'/' '{ print $5 }' | sed -e 's/.git//')
  fi

  if [[ "$dir" != dots* ]]; then
    dir="dots/vim/pack/eges/start/$dir"
  fi

  if [ ! -d "$dir" ]; then
    info "repository url is $url"
    info "install directory will be $dir"
    cd dots/vim/pack/eges/start/
    git clone --depth=1 https://github.com/majutsushi/tagbar.git
  else
    info "detected directory, clearing $dir"
    echo -n "confirm: ok? [y/N] "
    read ans
    if [ "$ans" == "y" ]; then
      rm -rf "$dir"
    fi
  fi
}

#=== FUNCTION =================================================================
#        NAME: install_it
# DESCRIPTION: install a vim plugin
# PARAMETER 1: url of git repo
# PARAMETER 2: optional install path
#==============================================================================
install_it() {
  local url="$1"
  local dir="$2"

  if [ -z "$dir" ]; then
    dir=$(echo $url | awk -F'/' '{ print $5 }' | sed -e 's/.git//')
  fi

  if [[ "$dir" != dots* ]]; then
    dir="dots/vim/pack/eges/start/$dir"
  fi

  info "repository url is $url"
  info "install directory will be $dir"
  echo -n "confirm: ok? [y/N] "
  read ans

  if [ "$ans" == "y" ]; then
    info "saving git submodule"
    git submodule add "$url" "$dir"
    info "saved git submodule"
  else
    info "not installing plugin"
  fi
}

#=== FUNCTION =================================================================
#        NAME: usage
# DESCRIPTION: prints help output
#==============================================================================
usage() {
  echo "Usage: ./configuration <flag|command|tool>"
  echo
  echo "  Flags:"
  echo "  --help, -h                    # View this help text"
  echo
  echo "  Commands:"
  echo "  install, i <repo> [path]      # Install a git submodule as a vim plugin"
  echo "  try, t <repo> [path]          # Clone/delete a git submodule as a vim plugin"
  echo "  update, u                     # Update dependencies (like Vim plugins)"
  echo "  check, c                      # Display optional software information"
  echo
  echo -n "  Tools:                        # "

  local i=0
  for option in git vim ctags tmux screen bash scala chunkwm kitty
  do
    i=$((i+1))

    if [[ "$i" != "1" ]]; then
      echo -n ", "
    fi

    echo -n "$option"
  done

  echo
}

#=== MAIN =====================================================================
if [ -z "$1" ]; then
  usage
  exit 1
fi

for arg in "$@"
do
  case $arg in
    git)
      link ~/.gitconfig "$dots/gitconfig"
      link ~/.gitignore "$dots/gitignore"
      ;;

    vim)
      git submodule update --init
      link ~/.vimrc "$dots/vimrc"
      link ~/.vim "$dots/vim"
      ;;

    kitty)
      link ~/.config/kitty/kitty.conf "$dots/kitty.conf"
      ;;

    chunkwm)
      link ~/.chunkwmrc "$dots/chunkwmrc"
      link ~/.skhdrc "$dots/skhdrc"
      ;;

    ctags)
      link ~/.ctags "$dots/ctags"
      ;;

    tmux)
      link ~/.tmux.conf "$dots/tmux.conf"
      installed brew reattach-to-user-namespace

      if [ $? -ne 0 ]; then
        warn "Current tmux configuration requires that 'reattach-to-user-namespace'"
        warn "be installed. Tmux will not be able to start up without it. To"
        warn "install, run the following command:"
        confirm
      fi
      ;;

    screen)
      link ~/.screenrc "$dots/screenrc"
      ;;

    bash)
      link ~/.bashrc "$dots/bashrc"
      link ~/.bash_aliases "$dots/bash_aliases"
      ;;

    scala)
      link ~/.scalafmt.conf "$dots/scalafmt.conf"
      link ~/.scalastyle.xml "$dots/scalastyle.xml"
      ;;

    c|check)
      software
      ;;

    t|try)
      try_it "$2" "$3"
      exit 0
      ;;

    i|install)
      install_it "$2" "$3"
      exit 0
      ;;

    u|update)
      for p in dots/vim/pack/eges/start/*;
      do
        pushd "$p" &> /dev/null
        info "updating $p..."
        git pull --rebase origin master &> /dev/null &
        popd &> /dev/null
      done

      wait
      info "done updating $(echo $(wc -w <<< "$(ls ./dots/vim/pack/eges/start/)")) packages"
      exit 0

      ;;

    -h|--help)
      usage
      exit 0
      ;;

    *)
      echo "Invalid argument $arg"
      echo
      usage
      exit 1
      ;;
  esac
done
