###############################################################################
# DEFINITIONS.......................................helper function definitions
# PROMPT........................................................prompt settings
# ENV SETTINGS........................................settings for the bash env
# VAR SETTINGS...............................................settings for tools
# SETTINGS...................................settings for commands/applications
# ALIASES..........................................anything but aliases go here
# FUNCTIONS..................because we may need an arg not at the end at times
# PATHS........................................................path var setters
# GNU FTW................................................brew install coreutils
# EXTRA SOURCES....................................load additional source files
###############################################################################

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

###############################################################################
# $DEFINITIONS
###############################################################################

#=== FUNCTION =================================================================
#        NAME: source?
# DESCRIPTION: loads a file if it exists
# PARAMETER 1: file
#==============================================================================
function source? {
    [ -f "$1" ] && source "$1"
}

#=== FUNCTION =================================================================
#        NAME: path!
# DESCRIPTION: adds a path to the $PATH variable
# PARAMETER 1: dir
#==============================================================================
function path! {
    [ -d "$1" ] && export PATH="$PATH:$1"
}

###############################################################################
# $PROMPT
###############################################################################

COL_ERR=$(tput setaf 9)
COL_WHOAMI=$(tput setaf 214)
COL_PWD=$(tput setaf 39)
COL_JOBS=$(tput setaf 171)
COL_RESET=$(tput sgr0)

ps1_prompt_jobscount() {
    local stopped=$(jobs -sp | wc -l | sed 's/ //g')
    local running=$(jobs -rp | wc -l | sed 's/ //g')
    ((running+stopped)) && echo -n "(${running}r/${stopped}s) "
}

ps1_nice_exit_code() {
    local last_exit="$?"

    # 0   ok
    # 130 manually cancelled (ctrl-c)
    # 146 sent process to background
    # 146 (git?) less exit
    if [ "$last_exit" -eq 0 ] || [ "$last_exit" -eq 146 ] || [ "$last_exit" -eq 141 ] || [ "$last_exit" -eq 130 ]; then
        return
    else
        echo "$(tput setaf 9)! $(tput sgr0)"
    fi
}

# export PS1='$(ps1_nice_exit_code)\
# $(tput setaf 214)$(whoami)$(tput sgr0) \
# $(tput setaf 39)\w$(tput sgr0) \
# $(tput setaf 171)$(ps1_prompt_jobscount)$(tput sgr0)$ '

export PS1='$(ps1_nice_exit_code)\
$(tput setaf 214)$(whoami)$(tput sgr0) \
$(tput setaf 39)\w$(tput sgr0) \
$(tput setaf 171)$(ps1_prompt_jobscount)$(tput sgr0)\n$ '

###############################################################################
# $ENV SETTINGS
###############################################################################

export EDITOR=vim

# don't put duplicate lines in the history. See bash(1) for more options or
# force ignoredups and ignorespace. for setting history length see HISTSIZE and
# HISTFILESIZE in bash(1)
export HISTCONTROL=ignoredups:ignorespace
export HISTSIZE=1000
export HISTFILESIZE=2000

# colored output on mac
export CLICOLOR=1
# http://geoff.greer.fm/lscolors/
# export LSCOLORS='exfxcxdxbxegedabagacad'
# export LS_COLORS='di=34;40:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'
export LSCOLORS=axBxhxDxfxhxhxhxhxcxcx
export LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=93:*.rpm=90'

###############################################################################
# $TOOL SETTINGS
###############################################################################

export ANT_ARGS='-logger org.apache.tools.ant.listener.AnsiColorLogger'
export GHC_DOT_APP=/Applications/ghc-7.10.3.app
export GOPATH=$HOME/go
export GOROOT=/usr/local/opt/go/libexec
export GRADLE_HOME=$HOME/.sdkman/candidates/gradle/current
export HDF5_DIR=/usr/local/hdf5/
export LUA_CPATH="$HOME/.luarocks/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so"
export LUA_PATH="$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua;/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/Cellar/lua/5.3.4_2/libexec/share/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua"
export LUA_ROCKS=$HOME/.luarocks
export MONO_IOMAP='case'
export NODE_PATH=$HOME/.node
export NVM_DIR=$HOME/.nvm
export PERL5LIB=$PERL5LIB:/home/marcos/perl5/lib/perl5
export PERL5LIB=/home/marcos/perl5/lib/perl5/i686-linux-gnu-thread-multi-64int
export PERL_LOCAL_LIB_ROOT=/home/marcos/perl5
export PERL_MB_OPT="--install_base /home/marcos/perl5"
export PERL_MM_OPT="INSTALL_BASE=/home/marcos/perl5"
export PGDATA=/usr/local/var/postgres
export SDKMAN_DIR=$HOME/.sdkman
export SMLNJ_HOME=/usr/local/smlnj

###############################################################################
# $SETTINGS
###############################################################################

# vi mode
set -o vi

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" ||
        eval "$(dircolors -b)"
fi

###############################################################################
# $ALIASES
###############################################################################

# git aliases
alias show='clear; git show'
alias save='git stash save'
alias pop='git stash pop'
alias add='git add'
alias addp='git add -p'
alias d='clear; git diff --color=always'
alias s='clear; git status'
alias l='git l'
alias c='cync'
alias p='push'

# colors!
alias grep='grep -I --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ll='ls -hlF --color'
alias la='ls -hA  --color'

alias ..='cd ..'
alias cd..='cd ..'
alias tmux='tmux -2'
alias copy='pbcopy'
alias dm='eval $(docker-machine env default)'
alias gw="./gradlew"
alias ipr="open *.ipr"
alias swp="find . | grep swp | sed -e 's/.swp//' | sed -e 's/\/\./\//'"
alias unswp='find . | grep swp | xargs rm'
alias code='cd $HOME/code/github.com/$GITHUB_USER/$2; tmux -2'
alias marp='/Applications/Marp.app/Contents/MacOS/Marp'

# Formatters
#  - Java: https://github.com/google/google-java-format
#  - JavaScript: https://github.com/prettier/prettier
#  - C/C++: http://clang.llvm.org/docs/ClangFormat.html
#  - D: https://github.com/dlang-community/dfmt
#  - Scala Fmt: http://scalameta.org/scalafmt/
#  - Scala Style: http://www.scalastyle.org/
alias javafmt='java -jar $HOME/.jars/google-java-format-1.5-all-deps.jar -r'
alias jsfmt='prettier --no-semi --write'
alias cfmt='clang-format -i -style Google'
alias dfmt='dub run dfmt -- -i --brace_style=stroustrup --indent_size=2'
alias scalafmt='scalafmt -c ~/.scalafmt.conf'
alias scalastyle='scalastyle -c ~/.scalastyle.xml'

###############################################################################
# $FUNCTIONS
###############################################################################

server() {
  local port=8000
  [ ! -z "$1" ] && port="$1"
  open http://localhost:$port
  # v2
  python -m SimpleHTTPServer $port
  # v3
  # python3 -m http.server $port
}

colors() {
  for i in {0..255}; do
      echo $(tput setaf $i)########################$(tput sgr0) - $i
  done
}

cm() {
  git commit -m "$*"
}

ca() {
  local fm="$1"

  if [ ! -f "$fm" ]; then
    echo "$fm does not exist!"
    return 1
  fi

  git add "$fm"
  git commit -m "$fm" "$fm"
}

cync() {
  git commit -am "$*"
}

gmove() {
  local branch=$1
  [ -z "$branch" ] && branch=master

  echo "updating $branch"

  git fetch --all
  git fetch --prune
  git checkout $branch
  git pull --rebase origin $branch
  git submodule update

  echo "status $branch for"
  git status
}

push() {
  git push origin $(git b)
}

#=== FUNCTION =================================================================
#        NAME: weather
# DESCRIPTION: gets the weather
# PARAMETER 1: City or Moon
#==============================================================================
function weather {
    curl "wttr.in/$1"
}

#=== FUNCTION =================================================================
#        NAME: run
# DESCRIPTION: Should do whatever needed in order to execute a given file.
# PARAMETER 1: Any file name with an extension.
#==============================================================================
function run {
  if [ -z "$1" ]; then
    echo "Usage: run <filename>"
    return 1
  elif [ ! -f "$1" ]; then
    echo "Could not find `$1` file."
    echo "Usage: run <filename>"
    return 1
  fi

  local file=$(basename "$1")
  local type="${file##*.}"
  local name="${file%.*}"

  case "$type" in
    java)
      javac $file
      java $name
      ;;

    pde)
      local sketch=$(pwd)
      local name=$(basename $sketch)
      local output="/tmp/processing-java/$name"
      echo "Running sketch located in $sketch"
      echo "Seting output to $output"
      processing-java --sketch="$sketch" --output="$output" --force --run &
      ;;

    *)
      echo "Unknown extension '$type'."
      echo "Dumping name extract:"
      echo
      echo " - file: $file"
      echo " - type: $type"
      echo " - name: $name"
      return 1
      ;;
  esac
}

#=== FUNCTION =================================================================
#        NAME: create
# DESCRIPTION: Outputs template content for different file types.
# PARAMETER 1: Any known file extension.
#==============================================================================
create() {
  if [ -z "$1" ]; then
    echo "Usage: create <extension> [options]"
    echo
    echo "  Extensions:"
    echo "    - html"
    echo "    - flutter"
    return 1
  fi

  case "$1" in
    html)
      cat <<HTML
<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="browser-ie7 lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="browser-ie8 lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="browser-ie9 lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="browser-modern"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="node_modules/normalize.css/normalize.css">
    </head>
    <body>
    </body>
</html>
HTML
      ;;

    flutter)
      shift
      flutter create --org xyz.minond --ios-language swift --android-language kotlin $*
      ;;

    *)
      echo "Invalid extension '$1', options include:"
      echo "  - html"
      return 1
      ;;
  esac
}

###############################################################################
# $GNU FTW (brew install coreutils)
###############################################################################

command -v gnome-open &> /dev/null && alias open='gnome-open'
command -v gls &> /dev/null && alias ls='gls'

###############################################################################
# $PATHS
###############################################################################

path! $HOME/.composer/bin/
path! $HOME/.rvm/bin
path! $HOME/.cabal/bin
path! $HOME/.cargo/bin
path! $HOME/.nvm/versions/node/v8.9.1/bin
path! $HOME/.llvm/5.0.1/bin
path! $HOME/.protoc/3.5.1/bin
path! $HOME/.flutter-lib/bin
path! $HOME/.sdkman/candidates/ant/current/bin
path! $HOME/.sdkman/candidates/gradle/current/bin
path! $HOME/.sdkman/candidates/sbt/current/bin
path! $HOME/.sdkman/candidates/scala/current/bin

path! /usr/local/smlnj/bin
path! /usr/local/heroku/bin
path! /usr/local/go/bin
path! /usr/local/nim/bin

path! $GOPATH/bin/
path! $NODE_PATH/bin/
path! $GHC_DOT_APP/Contents/bin

path! '/Applications/Racket v6.11/bin/'
path! '/Applications/Rakudo/bin/'

###############################################################################
# $EXTRA SOURCES
###############################################################################

source? $HOME/.private
source? $HOME/.bashrc_local
source? $HOME/.travis/travis.sh
source? $HOME/torch/install/bin/torch-activate

# These two slow down a session's start time but are still useful:
# source? $HOME/.sdkman/bin/sdkman-init.sh
# source? $NVM_DIR/nvm.sh

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


# ~ Marcos Minond
