"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LOAD EXTERNALS.................load external resources, start package manager
" VIM SETTINGS..................................vim built in setting overwrites
" PLUGIN SETTINGS.....................................plugin setting overwrites
" FILE TYPE SETTINGS......................file type specific setting overwrites
" DOMO.................................................................for work
" MAPPINGS..................................................custom key mappings
" COMMANDS......................................................custom commands
" COLORSCHEME..................................colorscheme and color overwrites
" SYNTAX...........................syntax (keyword) rebinding and configuration
" FUNCTIONS....................................................custom functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $LOAD EXTERNALS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
execute pathogen#infect()
Helptags

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $VIM SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set colorcolumn=80,120                   " http://paul-m-jones.com/archives/276
set cursorline                           " highlight the line cursor is on

set hlsearch                             " highlight all matches
set ignorecase                           " case insensitive searches
set incsearch                            " highlight matches while typing
set showmatch                            " jump to search result
set smartcase                            " case insensitive defaul

set list                                 " display special characters
set listchars=tab:>\ ,trail:.            " special characters for special char
set ls=2
set nocompatible
set nowrap
set number                               " show line numbers

set numberwidth=4                        " set line numbers section width
set expandtab
set shiftwidth=4                         " shift movement length
set softtabstop=4                        " back character length
set tabstop=4                            " tab character length
set backspace=indent,eol,start

set smartindent                          " block indentation
set splitbelow
set splitright

set hidden                               " best. thing. ever. no buffer closed
set antialias
set t_Co=256
set tags^=./.tags,./.TAGS,.tags,.TAGS
set statusline=%f\ [line:\ %l,\ col:\ %c\ -\ %P\]\ %m\ %r

set wildignore+=*/tmp/*,*.so,*.swp,*.zip " ignored by vim fs access
set wildignore+=*/templates_c/*,*/bin/*
set wildignore+=*/node_modules/*
set wildignore+=*/build/*
set wildignore+=*/public-built/*
set wildignore+=*/out/*
set wildmenu

set makeprg=make
set errorformat=%+A\ %#%f\ %#(%l\\\,%c):\ %m,%C%m

let mapleader = "\<Space>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $PLUGIN SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeShowHidden = 1
let NERDTreeIgnore = ['\.swp$', '\~$', '.git', '.sass-cache', '.scaffold']
let NERDTreeCascadeOpenSingleChildDir = 1
let NERDTreeCaseSensitiveSort = 1

let g:ctrlp_max_height = 30

let g:gitgutter_sign_added = '-'
let g:gitgutter_sign_modified = '-'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '-'
let g:gitgutter_sign_modified_removed = '-'

call tcomment#DefineType('htmljinja', g:tcommentInlineXML)
call tcomment#DefineType('htmljinja_block', g:tcommentBlockXML)

let g:vimshell_prompt_expr = 'escape(fnamemodify(getcwd(), ":~").">", "\\[]()?! ")." "'
let g:vimshell_prompt_pattern = '^\%(\f\|\\.\)\+> '

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $FILE TYPE SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype *github.com* call SetTabWidth(4)
au Filetype cucumber call SetTabWidth(2)
au Filetype ruby call SetTabWidth(2)
au Filetype scss.css call SetTabWidth(2)
au Filetype yaml call SetTabWidth(2)
au Filetype yml call SetTabWidth(2)

" file type remapping for syntax highlighting
au BufNewFile,BufRead * call <SID>ForceHighlightChanges()
au BufNewFile,BufRead *.cls set ft=java             " apex
au BufNewFile,BufRead *.dist set ft=xml
au BufNewFile,BufRead *.go set ft=go
au BufNewFile,BufRead *.json set ft=javascript
au BufNewFile,BufRead *.md set ft=mkd
au BufNewFile,BufRead *.object set ft=xml           " apex
au BufNewFile,BufRead *.page set ft=html            " apex
au BufNewFile,BufRead *.pp set ft=ruby
au BufNewFile,BufRead *.scala set ft=scala
au BufNewFile,BufRead *.tpl set ft=smarty
au BufNewFile,BufRead *.twig set ft=htmljinja
au BufNewFile,BufRead *.handlebars set ft=htmljinja
au BufNewFile,BufRead *.html set ft=htmljinja
au BufNewFile,BufRead *.{inc,lan,view,act,get,controller} set ft=php " isui
au BufNewFile,BufRead .arclint,.arcconfig set ft=javascript
au BufNewFile,BufRead .domainconfig set ft=dosini
au BufNewFile,BufReadPost Procfile set filetype=ruby

" spaces instead of tabs on everything but make files
au BufNewFile,BufRead * set expandtab
au BufNewFile,BufRead Makefile,*.mk set noexpandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $DOMO
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufNewFile,BufRead /Users/marcosminond/Documents/Domo/Source/DomoWeb/*
    \ call SetTabWidth(2)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-k> <ESC>:GitGutterNextHunk<CR>
map <C-j> <ESC>:GitGutterPrevHunk<CR>
map <C-o> <ESC>:CtrlP<CR>
map <leader>m <ESC>/=======\\|<<<<<<<\\|>>>>>>><CR>
map <leader>o <ESC>:CtrlPTag<CR>
map <leader>b <ESC>:CtrlPBuffer<CR>
map <C-c> <ESC>:TComment<CR>
map <leader>f <ESC>:NERDTreeFind<CR>
map <leader><S-f> <ESC>:NERDTreeToggle<CR>
map <C-b> <ESC>:exec("tag ".expand("<cword>"))<CR>
map <C-l> <ESC>:echo synIDattr(synID(line("."), col("."), 1), "name")<CR>
map <S-j> <ESC>:bp<CR>
map <S-k> <ESC>:bn<CR>
map <S-s> <ESC>:w<CR>
map <C-s> <ESC>:w<CR>
map <Tab> <C-w><C-w>
map <S-Tab> <C-w><S-w>
map <leader>g :GitGutter<CR>
map <leader>p :set paste!<CR>
map <leader>r :w<CR>:Run<CR>
map <leader>h :if exists("g:syntax_on") <Bar>
    \ syntax off <Bar>
    \ else <Bar>
    \syntax on <Bar>
    \ endif <CR>

" exit insert mode within insert mode
inoremap jj <Esc>:w<CR><RIGHT>
inoremap jw <Esc>:w<CR>

" colon, semi-colon switch
nnoremap ; :
nnoremap <leader>w :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <leader>c :Copy<CR><CR>
nnoremap <leader><S-c> :CopyFilename<CR><CR>

nmap <leader>s :source $MYVIMRC<CR>:noh<CR>:call <SID>ForceHighlightChanges()<CR>
nmap <leader>l :set list!<CR>
nmap <leader>n :set relativenumber!<CR>
xmap <C-c> <ESC>:'<,'>TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $COMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! S VimShell
command! Done qa
" ctags-exuberant
command! Ctags !ctags -R --verbose -f .tags
command! Copy w !cat | pbcopy && echo "copied to clip board"
command! CopyFilename !echo -n % | pbcopy && echo "copied filename to clip board"
" command! Copy !cat % | xclip -sel clip && echo "copied to clip board"

" gcc
command! GccRun !gcc % -o prog.out && chmod +x prog.out && ./prog.out && rm prog.out
command! -nargs=* GccCat !gcc % -o prog.out && chmod +x prog.out && cat <f-args> | ./prog.out && rm prog.out

" lisp
command! Lisp !clisp -i %

" php
command! Cupdate !composer update
command! Cautoload !composer dumpautoload
command! -nargs=* Test !clear; phpunit <f-args>
command! ViewTests !gnome-open ./bin/report/index.html

" git commands
command! Ann !clear; git annotate %
command! Stat !clear; git status
command! Reset !clear; git checkout %
command! Add execute ':silent !clear; git add %' | execute ':redraw!' | execute ':GitGutter'
command! AddP execute '!clear; git add -p %' | execute ':GitGutter'
command! -nargs=* Diff !clear; git diff <f-args>
command! -nargs=* Pull !clear; git pull origin <f-args>

" linters
command! Lint !file=$(basename %);ext="${file\#\#*.}"; clear;
\ case $ext in
    \ js)
        \ jshint -c ~/.jshintrc % | less --quit-at-eof
        \ ;;
    \ *)
        \ echo "i don't know what to do with .$ext files"
        \ ;;
\ esac


" run scripts
command! Run !file=$(basename %);ext="${file\#\#*.}";filename="${file\%.*}"; clear;
\ case $ext in
    \ scala)
        \ scala % | less --quit-at-eof
        \ ;;
    \ php)
        \ php % | less --quit-at-eof
        \ ;;
    \ js)
        \ DEBUG_COLORS=1 DEBUG=* node --harmony % | less --quit-at-eof
        \ ;;
    \ py)
        \ python % | less --quit-at-eof
        \ ;;
    \ lisp)
        \ clisp % | less --quit-at-eof
        \ ;;
    \ rb)
        \ ruby % | less --quit-at-eof
        \ ;;
    \ yaml|yml)
        \ yaml2json % | python -m json.tool | less --quit-at-eof
        \ ;;
    \ lua)
        \ lua % | less --quit-at-eof
        \ ;;
    \ md|markdown)
        \ ghmd %; open %:h/$filename.html; sleep 1; rm %:h/$filename.html;
        \ ;;
    \ go)
        \ go run % | less --quit-at-eof
        \ ;;
    \ *)
        \ ./%
        \ ;;
\ esac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORSCHEME
" http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &diff
    colo torte
else
    colo summerfruit256
endif

syntax on

autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline

" vim-javascript-syntax is adding syntax matches and breaking all of the things
" wtf?
function! <SID>ForceHighlightChanges()
    " syntax match javaScriptDocTags contained "@\(\w\+\)\>" nextgroup=javaScriptDocSeeTag skipwhite
    " syntax match javaScriptTemplateDelim     "\${\|}" contained
    " syntax region javaScriptTemplateVar      start=+${+ end=+}+                        contains=javaScriptTemplateDelim keepend
    " syntax region javaScriptTemplateString   start=+`+  skip=+\\\(`\|$\)+  end=+`+     contains=javaScriptTemplateVar,javaScriptSpecial keepend
    source ~/.vim/colors/summerfruit256-overwrites.vim
endfunction
call <SID>ForceHighlightChanges()
autocmd VimEnter * call <SID>ForceHighlightChanges()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SYNTAX
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax keyword phpException finally
syntax keyword sqlKeyword limit
syntax keyword sqlType avg
syntax keyword sqlType count
syntax keyword sqlType max
syntax keyword sqlType min
syntax keyword sqlType sum

hi ExtraWhitespace             ctermfg=161
match ExtraWhitespace /\s\+\%#\@<!$/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")

    " Work: match extra whitespace
    %s/\s\+$//e

    " Cleanup: restore previous search history and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! ShowColors()
    let num = 255

    " Work: create new highlight rule and pattern matcher
    while num >= 0
        exec 'hi col_' . num . ' ctermbg=' . num . ' ctermfg=white'
        exec 'syn match col_' . num . ' "ctermbg=' . num . ':...." containedIn=ALL'
        call append(0, 'ctermbg=' . num . ':....')
        let num = num - 1
    endwhile
endfunction

function! SetTabWidth(width)
    if a:width == 2
        set numberwidth=2
        set shiftwidth=2
        set softtabstop=2
        set tabstop=2
    elseif a:width == 4
        set numberwidth=4
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
    endif
endfunction
