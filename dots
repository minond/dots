#!/bin/bash

#==============================================================================
#         FILE: dots
#        USAGE: ./dots [action]
#  DESCRIPTION: links configuration files to files in this repo
#        USAGE: see "usage" function NOTES section
# REQUIREMENTS: this script must be ran from the root of the dots project
#        NOTES: configuration management should include actions for the
#               following tasks:
#                - install
#                - uninstall
#                - reset
#               it must at the very least include an "install" action
#               new actions are added by creating new functions. function
#               naming convention: dots_<action>_<what>. ie:
#                - dots_install_vim
#                - dots_uninstall_vim
#                - dots_reset_vim
#==============================================================================

#==============================================================================
# HELPERS..................................helper functions for file management
# VIM.................................................................vim files
# BASH...............................................................bash files
# TMUX...............................................................tmux files
# CTAGS.............................................................ctags files
# GIT.................................................................git files
# COMPOSER.......................................................composer files
#==============================================================================

action=$1
what=$2
function="dots_${action}_${what}"

#=== FUNCTION =================================================================
#        NAME: usage
# DESCRIPTION: print usage text with possible actions and what options
#==============================================================================
usage() {
    echo "usage: ./dots [-h|--help] [-u|--update] <action> [<what>] [--all]"
    echo " --help             # view this text output"
    echo " --update           # update this repository (needed for vim plugins)"

    echo
    echo "actions:"
    echo " install            # backup old configuration and set new configuration files"
    echo " uninstall          # restore old configuration files"
    echo " reset              # delete configuration files"

    echo
    echo "actions:"
    echo " - install --all    # install all configuration"

    # get all functions declared in this scripts
    typeset -F | sort | \
        # just dots_ functions. other functions are ignored
        grep dots_ | \
        # remove extras from typeset output and dots_ prefix
        sed 's/declare -f dots_//' | \
        # replace _ with spaces (ie. reset_vim -> reset vim)
        sed 's/_/ /g' | \
        # output name
        xargs -I {} echo " - {}"
}

#------------------------------------------------------------------------------
# $HELPERS
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: link
# DESCRIPTION: create a symbolic link
# PARAMETER 1: file
# PARAMETER 2: link
#==============================================================================
link() {
    file=`pwd`/$1
    link=$2

    if [ -f $link ] || [ -d $link ]; then
        rm -r $link
    fi

    echo "linking $file to $link"
    ln -s $file $link
}

#=== FUNCTION =================================================================
#        NAME: remove
# DESCRIPTION: removes a file
# PARAMETER 1: file
#==============================================================================
remove() {
    file=$1

    if [ -f $file ] || [ -d $file ]; then
        echo "removing $file"
        rm -r $file
    fi
}

#=== FUNCTION =================================================================
#        NAME: backup
# DESCRIPTION: creates a backup file
# PARAMETER 1: file
#==============================================================================
backup() {
    file=$1
    back=$file.bak

    if [ -f $file ] || [ -d $file ]; then
        [ -d $back ] && rm -r $back
        echo "backing up $file into $back"
        cp -r $file $back
    else
        echo "not backing up $file (not found)"
    fi
}

#=== FUNCTION =================================================================
#        NAME: restore
# DESCRIPTION: restores a backup file
# PARAMETER 1: file
#==============================================================================
restore() {
    file=$1
    back=$file.bak

    if [ -f $back ] || [ -d $back ]; then
        [ -d $file ] && rm -r $file
        echo "restoring $file from $back"
        mv $back $file
    else
        echo "not restoring $file found. backup ($back) not found"
    fi
}

#------------------------------------------------------------------------------
# $VIM
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_vim
# DESCRIPTION: add all vim related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_vim() {
    backup ~/.vim
    backup ~/.vimrc
    link vim/.vim ~/.vim
    link vim/.vimrc ~/.vimrc
}

#=== FUNCTION =================================================================
#        NAME: dots_uninstall_vim
# DESCRIPTION: remove all vim related files. restores files that where
#              previously there
#==============================================================================
dots_uninstall_vim() {
    restore ~/.vim
    restore ~/.vimrc
}

#=== FUNCTION =================================================================
#        NAME: dots_reset_vim
# DESCRIPTION: remove all vim related files.
#==============================================================================
dots_reset_vim() {
    remove ~/.vim
    remove ~/.vimrc
}

#------------------------------------------------------------------------------
# $BASH
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_bash
# DESCRIPTION: add all bash related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_bash() {
    backup ~/.bashrc
    link bash/.bashrc ~/.bashrc
}

#------------------------------------------------------------------------------
# $TMUX
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_tmux
# DESCRIPTION: add all tmux related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_tmux() {
    backup ~/.tmux.conf
    link multiplexer/.tmux.conf ~/.tmux.conf
}

#------------------------------------------------------------------------------
# $CTAGS
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_ctags
# DESCRIPTION: add all ctags related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_ctags() {
    backup ~/.ctags
    link code/.ctags ~/.ctags
}

#------------------------------------------------------------------------------
# $GIT
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_git
# DESCRIPTION: add all git related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_git() {
    backup ~/.gitconfig
    backup ~/.gitignore
    link git/.gitconfig ~/.gitconfig
    link git/.gitignore ~/.gitignore
}

#------------------------------------------------------------------------------
# $COMPOSER
#------------------------------------------------------------------------------

#=== FUNCTION =================================================================
#        NAME: dots_install_composer
# DESCRIPTION: add all composer related files. creates a backup of what was
#              previously there
#==============================================================================
dots_install_composer() {
    backup ~/.composer/composer.json
    backup ~/.composer/composer.lock
    backup ~/.composer/config.json
    link composer/composer.json ~/.composer/composer.json
    link composer/composer.lock ~/.composer/composer.lock
    link composer/config.json ~/.composer/config.json
}

#------------------------------------------------------------------------------
# execute
#------------------------------------------------------------------------------
declare -f $function > /dev/null

if [ $? -eq 0 ]; then
    eval $function
else
    case $action in
        "")
            usage
            ;;

        -h|--help)
            usage
            ;;

        -u|--update)
            git pull --rebase origin master
            git submodule update --init
            ;;

        install)
            case $what in
                --all)
                    echo "installing everything..."
                    dots_install_bash
                    dots_install_vim
                    dots_install_git
                    dots_install_ctags
                    dots_install_composer
                    dots_install_tmux
                    ;;

                *)
                    echo "invalid what: $what"
                    usage
                    exit 1
                    ;;
            esac
            ;;

        *)
            echo "invalid action: $action"
            usage
            exit 1
            ;;
    esac
fi

